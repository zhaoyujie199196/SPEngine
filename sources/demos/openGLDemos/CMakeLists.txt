cmake_minimum_required(VERSION 3.8)
PROJECT(OPENGLDEMOS)
#添加c++17
add_compile_options("/std:c++latest")

#添加三方库路径
set(THIRDPARTY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../../3rdparty)
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR})
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/glfw/include)
INCLUDE_DIRECTORIES(${THIRDPARTY_DIR}/glad/include)
LINK_DIRECTORIES(${THIRDPARTY_DIR}/glfw/libs/win64_debug)

#指定执行文件
ADD_EXECUTABLE(OPENGLDEMOS ./main.cpp)
#指定第三方库
#添加glfw
TARGET_LINK_LIBRARIES(OPENGLDEMOS PUBLIC glfw3)
#添加glad源代码
FILE(GLOB GLAD_SOURCE_C "${THIRDPARTY_DIR}/glad/src/*.c")
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${GLAD_SOURCE_C})
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${GLAD_SOURCE_C})
#添加stb_image
FILE(GLOB STBIMAGE_H "${THIRDPARTY_DIR}/stbImage/*.h")
FILE(GLOB STBIMAGE_CPP "${THIRDPARTY_DIR}/stbImage/*.cpp")
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${STBIMAGE_H})
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${STBIMAGE_CPP})
#添加glm
set(GLM_DIR ${THIRDPARTY_DIR}/glm)
INCLUDE_DIRECTORIES(${GLM_DIR})
#添加imGui
set(IMGUI_DIR ${THIRDPARTY_DIR}/imgui)
INCLUDE_DIRECTORIES(${IMGUI_DIR})
FILE(GLOB IMGUI_H "${IMGUI_DIR}/*.h")
FILE(GLOB IMGUI_CPP "${IMGUI_DIR}/*.cpp")
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${IMGUI_H})
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${IMGUI_CPP})
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${IMGUI_DIR}/backends/imgui_impl_glfw.h)
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp)
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${IMGUI_DIR}/backends/imgui_impl_opengl3.h)
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp)


#添加主工程include
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/)

#主工程代码
FILE(GLOB_RECURSE SRC_LIST_CPP "./*.cpp")
FILE(GLOB_RECURSE SRC_LIST_H "./*.h")
TARGET_SOURCES(OPENGLDEMOS PUBLIC ${SRC_LIST_CPP})

set(BUILD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../../../../OpenGLDemosBuild)
set(EXECUTABLE_OUTPUT_PATH ${BUILD_DIR}/bin)
set(PROJECT_BINARY_DIR ${BUILD_DIR}/build/x64-debug)

#添加编译处理，链接builtinRes文件
MESSAGE("bash path=$ENV{BASH}")
SET( BASH_COMMAND_TO_RUN $ENV{BASH} "-c" "cd ${CMAKE_CURRENT_SOURCE_DIR} && sh ./linkBuiltinRes.sh ${EXECUTABLE_OUTPUT_PATH}/builtinRes ${CMAKE_CURRENT_SOURCE_DIR}/builtinRes" )
EXECUTE_PROCESS( COMMAND ${BASH_COMMAND_TO_RUN} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} RESULT_VARIABLE command_result )
IF( NOT "${command_result}" STREQUAL "0" )
    MESSAGE( FATAL_ERROR "Error: command_result='${command_result}'" )
ENDIF()


MESSAGE("source files ${SRC_LIST_CPP}")
MESSAGE("header files ${SRC_LIST_H}")
MESSAGE("executable output path ${PROJECT_BINARY_DIR}")
MESSAGE("Current path : ${CMAKE_CURRENT_SOURCE_DIR}")
